name: Block Domains

on:
  push:
    branches:
      - main

jobs:
  block_domains:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@master

    - name: Set up Python
      uses: actions/setup-python@master
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Download and split blocked domain list
      run: |
        import requests

        url = "https://raw.githubusercontent.com/MartinatorTime/Cloudflare-adblock-py/main/cloudflare/lists/hosts.txt"
        response = requests.get(url)
        domains = response.text.split('\n')
        
        for i in range(0, len(domains), 1000):
            with open(f"list_{i//1000 + 1}.txt", "w") as f:
                f.write("\n".join(domains[i:i+1000]))

    - name: Upload domain lists and create DNS policy
      env:
        CF_API_KEY: ${{ secrets.CF_API_KEY }}
        CF_API_ACCOUNT_ID: ${{ secrets.CF_API_ACCOUNT_ID }}
        CF_API_EMAIL: ${{ secrets.CF_API_EMAIL }}
      run: |
        import json
        import os
        import requests

        headers = {
            "X-Auth-Email": os.environ["CF_API_EMAIL"],
            "X-Auth-Key": os.environ["CF_API_KEY"],
            "Content-Type": "application/json"
        }

        base_url = f"https://api.cloudflare.com/client/v4/accounts/{os.environ['CF_API_ACCOUNT_ID']}/gateway"

        list_ids = []

        for i in range(len(os.listdir())):
            if not os.path.isfile(f"list_{i+1}.txt"):
                break

            with open(f"list_{i+1}.txt", "r") as f:
                domains = f.read().split('\n')

            data = {
                "name": f"Blocked_Domains_List_{i+1}",
                "description": f"List of blocked domains (part {i+1})",
                "items": domains
            }

            response = requests.post(f"{base_url}/lists", headers=headers, data=json.dumps(data))
            list_id = response.json()["result"]["id"]
            list_ids.append(list_id)

        expression = " or ".join([f"list('{list_id}')" for list_id in list_ids])
        rule_data = {
            "action": "block",
            "expression": expression,
            "description": "Block all uploaded domain lists"
        }

        response = requests.post(f"{base_url}/rules", headers=headers, data=json.dumps(rule_data))
